# routes.py
from flask import Blueprint, render_template, request, session, redirect, url_for, flash
from datetime import datetime
from models import db, User, OTP_Logs
from utils import generate_otp, get_expiration_time, send_email_otp, send_sms, send_push_notification, generate_hardware_otp, generate_qr_code
import pyotp
from flask import request, jsonify
import requests
from utils import send_email_login_decision
from utils import generate_otp, get_expiration_time, send_email_otp, send_sms, verify_sms_token
import os
from dotenv import load_dotenv
load_dotenv()
from flask import request, jsonify



api_key = os.getenv("SPEEDSMS_API_KEY")
app_id = os.getenv("SPEEDSMS_APP_ID")






push_tokens = set()
bp = Blueprint('main', __name__)

# --- Quy tr√¨nh ƒëƒÉng k√Ω (s·ª≠ d·ª•ng OTP qua email ƒë·ªÉ x√°c th·ª±c ƒëƒÉng k√Ω) ---
@bp.route('/')
def index():
    return render_template('register.html')

@bp.route('/switch_to_login')
def switch_to_login():
    return redirect(url_for('main.login'))

@bp.route('/register', methods=['POST'])
def register():
    username = request.form.get('username')
    email = request.form.get('email')
    password = request.form.get('password')
    phone = request.form.get('phone')

    if User.query.filter_by(username=username).first():
        flash("T√™n ƒëƒÉng nh·∫≠p ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng. Vui l√≤ng ch·ªçn t√™n kh√°c.")
        return redirect(url_for('main.index'))

    new_user = User(
        username=username,
        email=email,
        password=password,
        phone=phone,
        is_verified=False
    )
    db.session.add(new_user)
    db.session.commit()

    otp = generate_otp()
    expires_at = get_expiration_time(10)

    otp_record = OTP_Logs(
        user_id=new_user.id,
        otp_code=otp,
        expires_at=expires_at,
        status='pending'
    )
    db.session.add(otp_record)
    db.session.commit()

    session['reg_user_id'] = new_user.id
    send_email_otp(email, otp)

    flash("OTP ƒë√£ ƒë∆∞·ª£c g·ª≠i v·ªÅ email c·ªßa b·∫°n. Vui l√≤ng ki·ªÉm tra v√† nh·∫≠p OTP.")
    return render_template('register_verify.html')


#ƒêƒÉng k√Ω
@bp.route('/register/verify', methods=['POST'])
def register_verify():
    user_input_otp = request.form.get('otp')
    reg_user_id = session.get('reg_user_id')
    if not reg_user_id:
        flash("Phi√™n ƒëƒÉng k√Ω ƒë√£ h·∫øt h·∫°n. Vui l√≤ng ƒëƒÉng k√Ω l·∫°i.")
        return redirect(url_for('main.index'))

    otp_record = OTP_Logs.query.filter_by(user_id=reg_user_id, status='pending') \
                               .order_by(OTP_Logs.created_at.desc()).first()

    if otp_record:
        current_time = datetime.utcnow()
        if current_time > otp_record.expires_at:
            otp_record.status = 'expired'
            db.session.commit()
            flash("M√£ OTP ƒë√£ h·∫øt h·∫°n, vui l√≤ng ƒëƒÉng k√Ω l·∫°i.")
            return redirect(url_for('main.index'))
        elif user_input_otp == otp_record.otp_code:
            otp_record.status = 'verified'
            db.session.commit()
            user = User.query.get(reg_user_id)
            user.is_verified = True
            db.session.commit()

            flash("ƒêƒÉng k√Ω th√†nh c√¥ng! H√£y ƒëƒÉng nh·∫≠p.")
            session.pop('reg_user_id', None)
            return redirect(url_for('main.login'))
        else:
            flash("OTP kh√¥ng ch√≠nh x√°c, vui l√≤ng th·ª≠ l·∫°i.")
            return render_template('register_verify.html')
    else:
        flash("Kh√¥ng t√¨m th·∫•y OTP cho t√†i kho·∫£n n√†y, vui l√≤ng ƒëƒÉng k√Ω l·∫°i.")
        return redirect(url_for('main.index'))


#ƒêƒÉng nh·∫≠pnh·∫≠p
@bp.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'GET':
        return render_template('login.html')

    username = request.form.get('username')
    password = request.form.get('password')
    user = User.query.filter_by(username=username).first()
    if user and user.password == password:
        if not user.is_verified:
            flash("T√†i kho·∫£n c·ªßa b·∫°n ch∆∞a ƒë∆∞·ª£c x√°c th·ª±c, vui l√≤ng ƒëƒÉng k√Ω l·∫°i.")
            return redirect(url_for('main.index'))
        session['username'] = username
        
        # ‚úÖ Th√™m d√≤ng n√†y ƒë·ªÉ g·ª≠i th√¥ng b√°o ƒë·∫©y
        send_push_notification("X√°c th·ª±c th√†nh c√¥ng", f"T√†i kho·∫£n {username} v·ª´a ƒëƒÉng nh·∫≠p.")
        
        flash(" H√£y ch·ªçn ph∆∞∆°ng th·ª©c x√°c th·ª±c 2FA.")
        return redirect(url_for('main.choose_method'))
    flash("Th√¥ng tin ƒëƒÉng nh·∫≠p kh√¥ng ƒë√∫ng, vui l√≤ng ki·ªÉm tra l·∫°i.")
    return redirect(url_for('main.login'))


@bp.route('/switch_to_register')
def switch_to_register():
    return redirect(url_for('main.index'))

#Ch·ªçn c√°ch x√°c th·ª±cth·ª±c
@bp.route('/choose')
def choose_method():
    if 'username' not in session:
        return redirect(url_for('main.login'))
    return render_template('choose_method.html')


#SMS TOKENTOKEN
@bp.route('/auth/sms')
def auth_sms():
    if 'username' not in session:
        return redirect(url_for('main.login'))

    username = session['username']
    user = User.query.filter_by(username=username).first()

    if not user or not user.phone:
        flash("Kh√¥ng t√¨m th·∫•y s·ªë ƒëi·ªán tho·∫°i c·ªßa b·∫°n.")
        return redirect(url_for('main.choose_method'))

    # Chu·∫©n h√≥a s·ªë ƒëi·ªán tho·∫°i v·ªÅ ƒë·ªãnh d·∫°ng +84...
    phone = user.phone.strip()
    if phone.startswith("0"):
        phone = "+84" + phone[1:]
    elif not phone.startswith("+"):
        phone = "+84" + phone  # fallback n·∫øu nh·∫≠p thi·∫øu

    # T·∫°o m√£ OTP v√† l∆∞u session ƒë·ªÉ x√°c minh
    otp = generate_otp()
    session['otp_sms'] = otp  # d√πng cho verify_sms()

    # G·ª≠i OTP b·∫±ng SpeedSMS API
    try:
       
        url = "https://api.speedsms.vn/index.php/sms/send"
        headers = {
            "Content-Type": "application/json"
        }
        payload = {
            "to": [phone],
            "content": f"M√£ OTP c·ªßa b·∫°n l√†: {otp}\n@127.0.0.1 #{otp}",
            "type": 2  # 2 = SMS OTP
        }

        response = requests.post(
            url,
            json=payload,
            headers=headers,
            auth=(api_key, '')
        )

        print(f"[SpeedSMS] Tr·∫°ng th√°i: {response.status_code}")
        print(f"[SpeedSMS] Ph·∫£n h·ªìi: {response.text}")

        if response.status_code != 200:
            flash("‚ùå L·ªói khi g·ª≠i SMS OTP. Vui l√≤ng th·ª≠ l·∫°i.")
            return redirect(url_for('main.choose_method'))

    except Exception as e:
        print(f"[SpeedSMS] L·ªói g·ª≠i SMS: {e}")
        flash("‚ùå Kh√¥ng th·ªÉ g·ª≠i OTP qua SMS.")
        return redirect(url_for('main.choose_method'))

    # Giao di·ªán x√°c minh OTP
    return render_template('verify.html',
                           header="X√°c th·ª±c SMS",
                           message="OTP ƒë√£ ƒë∆∞·ª£c g·ª≠i qua SMS.",
                           verify_url=url_for('main.verify_sms'))


@bp.route('/auth/sms/verify', methods=['POST'])
def verify_sms():
    if 'username' not in session:
        return redirect(url_for('main.login'))

    otp_input = request.form.get('otp')
    username = session['username']
    user = User.query.filter_by(username=username).first()

    if not user or not user.phone:
        flash("Kh√¥ng t√¨m th·∫•y s·ªë ƒëi·ªán tho·∫°i.")
        return redirect(url_for('main.choose_method'))

    phone = user.phone
    if phone.startswith("0"):
        phone = "+84" + phone[1:]

    if otp_input == session.get('otp_sms'):
        session.pop('otp_sms', None)
        flash("‚úÖ X√°c th·ª±c th√†nh c√¥ng!")
        return redirect(url_for('main.home'))

    flash("‚ùå OTP kh√¥ng h·ª£p l·ªá!")
    return redirect(url_for('main.choose_method'))


#Voice tokentoken
@bp.route('/auth/voice')
def auth_voice():
    if 'username' not in session:
        return redirect(url_for('main.login'))
    otp = generate_otp()
    session['otp_2fa'] = otp
    username = session['username']
    user = User.query.filter_by(username=username).first()
    if not user or not user.phone:
        flash("Kh√¥ng t√¨m th·∫•y s·ªë ƒëi·ªán tho·∫°i c·ªßa b·∫°n. Vui l√≤ng c·∫≠p nh·∫≠t th√¥ng tin.")
        return redirect(url_for('main.choose_method'))

    print(f"[VOICE] G·ª≠i OTP {otp} qua cu·ªôc g·ªçi t·ªõi s·ªë {user.phone}")

    return render_template('verify.html',
                           header="X√°c th·ª±c Voice",
                           message="OTP ƒë√£ ƒë∆∞·ª£c g·ª≠i qua cu·ªôc g·ªçi gi·∫£ l·∫≠p. Nh·∫•n n√∫t üîä ƒë·ªÉ nghe m√£.",
                           verify_url=url_for('main.verify_voice'),
                           otp_to_speak=otp)  # truy·ªÅn v√†o ƒë·ªÉ giao di·ªán c√≥ th·ªÉ ƒë·ªçc

@bp.route('/auth/voice/verify', methods=['POST'])
def verify_voice():
    if 'username' not in session:
        return redirect(url_for('main.login'))
    otp_input = request.form.get('otp')
    if otp_input == session.get('otp_2fa'):
        session.pop('otp_2fa', None)
        flash("X√°c th·ª±c 2FA th√†nh c√¥ng!")
        return redirect(url_for('main.home'))
    flash("OTP Voice kh√¥ng h·ª£p l·ªá!")
    return redirect(url_for('main.choose_method'))


#APP Token
@bp.route('/auth/totp')
def auth_totp():
    if 'username' not in session:
        return redirect(url_for('main.login'))

    username = session['username']
    user = User.query.filter_by(username=username).first()
    if not user:
        flash("Kh√¥ng t√¨m th·∫•y th√¥ng tin ng∆∞·ªùi d√πng.")
        return redirect(url_for('main.login'))

    if not user.totp_secret:
        secret = pyotp.random_base32()
        user.totp_secret = secret
        db.session.commit()
    else:
        secret = user.totp_secret

    totp = pyotp.TOTP(secret)
    provisioning_uri = totp.provisioning_uri(name=username, issuer_name="X√°c th·ª±c 2FA")
    qr_code_img = generate_qr_code(provisioning_uri)
    message = "Qu√©t m√£ QR b·∫±ng Google Authenticator ƒë·ªÉ thi·∫øt l·∫≠p TOTP, sau ƒë√≥ nh·∫≠p OTP b√™n d∆∞·ªõi."

    return render_template('verify.html',
                           header="X√°c th·ª±c Software Token (TOTP)",
                           message=message,
                           qr_code=qr_code_img,
                           verify_url=url_for('main.verify_totp'))

@bp.route('/auth/totp/verify', methods=['POST'])
def verify_totp():
    if 'username' not in session:
        return redirect(url_for('main.login'))

    username = session['username']
    user = User.query.filter_by(username=username).first()
    if not user or not user.totp_secret:
        flash("Kh√¥ng t√¨m th·∫•y kh√≥a TOTP cho t√†i kho·∫£n c·ªßa b·∫°n.")
        return redirect(url_for('main.choose_method'))

    otp_input = request.form.get('otp')
    totp = pyotp.TOTP(user.totp_secret)
    if totp.verify(otp_input):
        flash("X√°c th·ª±c TOTP th√†nh c√¥ng!")
        return redirect(url_for('main.home'))
    else:
        flash("M√£ OTP kh√¥ng h·ª£p l·ªá, vui l√≤ng th·ª≠ l·∫°i.")
        return redirect(url_for('main.auth_totp'))



#Hardware Token
@bp.route('/auth/usb')
def auth_usb():
    return render_template("auth_usb.html")  

@bp.route('/verify_usb_token', methods=['POST'])
def verify_usb_token():
    token = request.json.get("token")
    if token == "SECRET-TOKEN-1234":
        print("[‚úÖ] Token USB h·ª£p l·ªá.")
        session['usb_verified'] = True   # ‚úÖ B·ªï sung d√≤ng n√†y
        return jsonify({"status": "success", "message": "X√°c th·ª±c th√†nh c√¥ng!"})
    else:
        print("[‚ùå] Token USB kh√¥ng h·ª£p l·ªá.")
        return jsonify({"status": "fail", "message": "Token kh√¥ng h·ª£p l·ªá!"}), 403

@bp.route('/check_usb_status')
def check_usb_status():
    return jsonify({"verified": session.get("usb_verified", False)})


@bp.route('/home')
def home():
    if 'username' not in session:
        return redirect(url_for('main.login'))
    return render_template('home.html')

@bp.route('/logout')
def logout():
    session.clear()
    flash("B·∫°n ƒë√£ ƒëƒÉng xu·∫•t.")
    return redirect(url_for('main.login'))

@bp.route('/voice_token_simulation')
def voice_token_simulation():
    otp = generate_otp()
    session['otp_voice'] = otp
    return render_template('verify.html',
                       header="X√°c th·ª±c Voice",
                       message="OTP ƒë√£ ƒë∆∞·ª£c g·ª≠i qua cu·ªôc g·ªçi gi·∫£ l·∫≠p. Nh·∫•n n√∫t üîä ƒë·ªÉ nghe m√£.",
                       verify_url=url_for('main.verify_voice'),
                       otp_to_speak=otp)



#Push NotificationNotification    
@bp.route('/auth/email')
def auth_email():
    if 'username' not in session:
        return redirect(url_for('main.login'))
    username = session['username']
    user = User.query.filter_by(username=username).first()

    if not user or not user.email:
        flash("Kh√¥ng t√¨m th·∫•y email t√†i kho·∫£n.")
        return redirect(url_for('main.choose_method'))

    send_email_login_decision(user.email, username)

    return render_template('verify.html',
                           header="X√°c th·ª±c qua Gmail",
                           message="Email x√°c th·ª±c ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn h·ªôp th∆∞ c·ªßa b·∫°n. Vui l√≤ng ki·ªÉm tra v√† ch·ªçn x√°c nh·∫≠n.",
                           verify_url="#")

@bp.route('/verify_email_decision')
def verify_email_decision():
    username = request.args.get('user')
    result = request.args.get('result')

    if result == 'yes':
        session['username'] = username
        flash("‚úÖ X√°c th·ª±c qua email th√†nh c√¥ng!")
        return redirect(url_for('main.home'))
    else:
        session.clear()
        flash("‚ùå B·∫°n ƒë√£ t·ª´ ch·ªëi x√°c th·ª±c ƒëƒÉng nh·∫≠p.")
        return redirect(url_for('main.login'))

    
