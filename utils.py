# utils.py
import random
import smtplib
from email.mime.text import MIMEText
from datetime import datetime, timedelta
import pyotp
import qrcode
import io
import base64
from markupsafe import Markup
import requests
import os
from dotenv import load_dotenv
import os
import requests
import json
from dotenv import load_dotenv
import os
import requests

load_dotenv()


def generate_otp():
    """Sinh OTP 6 ch·ªØ s·ªë ng·∫´u nhi√™n."""
    return str(random.randint(100000, 999999))

def get_expiration_time(minutes=10):
    """T√≠nh th·ªùi gian OTP h·∫øt h·∫°n: hi·ªán t·∫°i + s·ªë ph√∫t (m·∫∑c ƒë·ªãnh 10 ph√∫t)."""
    return datetime.utcnow() + timedelta(minutes=minutes)

def send_email_otp(recipient_email, otp):
    """
    G·ª≠i OTP qua email s·ª≠ d·ª•ng SMTP c·ªßa Gmail.
    D√πng t√†i kho·∫£n 2FA@gmail.com v·ªõi m·∫≠t kh·∫©u ·ª©ng d·ª•ng: 'vyaf verk ahsb qdgy'
    """
    smtp_server = 'smtp.gmail.com'
    smtp_port = 587
    sender_email = os.getenv("EMAIL_USER")
    sender_password = os.getenv("EMAIL_PASSWORD")


    subject = 'M√£ OTP x√°c th·ª±c ƒëƒÉng nh·∫≠p'
    body = f'M√£ OTP c·ªßa b·∫°n l√†: {otp}'

    msg = MIMEText(body)
    msg['Subject'] = subject
    msg['From'] = sender_email
    msg['To'] = recipient_email

    try:
        server = smtplib.SMTP(smtp_server, smtp_port)
        server.ehlo()
        server.starttls()
        server.ehlo()
        server.login(sender_email, sender_password)
        server.send_message(msg)
        server.quit()
        print(f"[EMAIL] G·ª≠i OTP {otp} th√†nh c√¥ng t·ªõi {recipient_email}")
    except Exception as e:
        print(f"[EMAIL] G·ª≠i email th·∫•t b·∫°i: {e}")
        print(f"[DEMO] OTP: {otp}")


def send_sms(phone, otp):
    api_key = os.getenv("SPEEDSMS_API_KEY")
    app_id = os.getenv("SPEEDSMS_APP_ID")

    url = "https://api.speedsms.vn/index.php/verify/request"
    headers = { "Content-Type": "application/json" }

    payload = {
        "to": phone,
        "pin_code": otp,
        "content": "M√£ OTP x√°c th·ª±c c·ªßa b·∫°n l√†: {pin_code}",
        "type": "sms",
        "sender": "Verify",
        "app_id": app_id
    }

    response = requests.post(url, json=payload, headers=headers, auth=(api_key, ''))
    print(f"[SpeedSMS] Tr·∫°ng th√°i: {response.status_code}")
    print(f"[SpeedSMS] Ph·∫£n h·ªìi: {response.text}")

def verify_sms_token(phone, otp):
    """
    X√°c minh OTP SMS b·∫±ng so s√°nh tr·ª±c ti·∫øp v·ªõi session
    """
    import flask
    return otp == flask.session.get('otp_sms')


def send_voice(phone, otp):
    print(f"[VOICE] G·ª≠i OTP {otp} qua cu·ªôc g·ªçi t·ªõi s·ªë {phone}")

def send_push_notification(device_token, otp):
    print(f"[PUSH] G·ª≠i OTP {otp} ƒë·∫øn thi·∫øt b·ªã v·ªõi token {device_token}")

def generate_hardware_otp():
    HARDWARE_SECRET = "HARDWARESECRET1234"
    totp = pyotp.TOTP(HARDWARE_SECRET, interval=30)
    return totp.now()

#T·∫°o QR code
def generate_qr_code(data):
    """
    Sinh m√£ QR t·ª´ d·ªØ li·ªáu (v√≠ d·ª• Provisioning URI) v√† tr·∫£ v·ªÅ m√£ HTML d·∫°ng img nh√∫ng base64.
    """
    # T·∫°o QR Code v·ªõi c·∫•u h√¨nh c∆° b·∫£n
    qr = qrcode.QRCode(
        version=1,
        error_correction=qrcode.constants.ERROR_CORRECT_L,
        box_size=10,
        border=4,
    )
    qr.add_data(data)
    qr.make(fit=True)
    img = qr.make_image(fill_color="black", back_color="white")
    
    # L∆∞u h√¨nh ·∫£nh v√†o b·ªô nh·ªõ ƒë·ªám
    buffered = io.BytesIO()
    img.save(buffered, format="PNG")
    img_str = base64.b64encode(buffered.getvalue()).decode("ascii")
    
    # Tr·∫£ v·ªÅ HTML ƒë·ªÉ nh√∫ng h√¨nh ·∫£nh QR
    return Markup(f'<img src="data:image/png;base64,{img_str}" alt="QR Code">')


        
def send_email_login_decision(recipient_email, username):
    # S·ª≠ d·ª•ng bi·∫øn m√¥i tr∆∞·ªùng BASE_URL, m·∫∑c ƒë·ªãnh l√† localhost n·∫øu ch∆∞a c√≥
    base_url = os.getenv("BASE_URL", "http://127.0.0.1:5000")
    
    confirm_url = f"{base_url}/verify_email_decision?user={username}&result=yes"
    deny_url = f"{base_url}/verify_email_decision?user={username}&result=no"

    html_body = f"""
    <p>üö® C√≥ y√™u c·∫ßu ƒëƒÉng nh·∫≠p v√†o t√†i kho·∫£n <b>{username}</b>.</p>
    <p>B·∫°n c√≥ th·ª±c hi·ªán h√†nh ƒë·ªông n√†y kh√¥ng?</p>
    <a href="{confirm_url}">‚úÖ L√† t√¥i</a><br>
    <a href="{deny_url}">‚ùå Kh√¥ng ph·∫£i t√¥i</a>
    """

    msg = MIMEText(html_body, "html")
    msg["Subject"] = "X√°c th·ª±c ƒëƒÉng nh·∫≠p t√†i kho·∫£n"
    msg["From"] = os.getenv("EMAIL_USER", "no-reply@example.com")
    msg["To"] = recipient_email

    try:
        server = smtplib.SMTP("smtp.gmail.com", 587)
        server.starttls()
        server.login(os.getenv("EMAIL_USER"), os.getenv("EMAIL_PASSWORD"))
        server.send_message(msg)
        server.quit()
        print(f"[EMAIL] G·ª≠i link x√°c th·ª±c ƒë·∫øn {recipient_email}")
    except Exception as e:
        print(f"[ERROR] G·ª≠i email th·∫•t b·∫°i: {e}")


#Voice-token
# def generate_stringee_signature(api_key_sid, api_key_secret):
#     import hmac, hashlib, base64, time, json

#     headers = {"typ": "JWT", "alg": "HS256"}
#     payload = {
#         "jti": api_key_sid,
#         "iss": api_key_sid,
#         "exp": int(time.time()) + 3600,
#         "userId": api_key_sid,
#         "rest_api": True  # ‚úÖ B·∫ÆT BU·ªòC c√≥ d√≤ng n√†y
#     }

#     def encode(obj):
#         return base64.urlsafe_b64encode(json.dumps(obj).encode()).rstrip(b'=')

#     header_enc = encode(headers)
#     payload_enc = encode(payload)
#     message = header_enc + b"." + payload_enc
#     signature = hmac.new(api_key_secret.encode(), message, hashlib.sha256).digest()
#     signature_enc = base64.urlsafe_b64encode(signature).rstrip(b'=')
#     return (message + b"." + signature_enc).decode()


def send_voice_call_stringee(to_phone, otp):
    rest_token = os.getenv("STRINGEE_REST_TOKEN")
    from_number = os.getenv("STRINGEE_FROM")

    payload = {
        "from": {
            "type": "external",
            "number": from_number,
            "alias": "Xac thuc"
        },
        "to": [
            {
                "type": "external",
                "number": to_phone,
                "alias": "Ban"
            }
        ],
        "actions": [
            {
                "action": "talk",
                "text": f"Ma xac thuc cua ban la {' '.join(otp)}",
                "voice": "female",
                "language": "vi-VN"
            }
        ]
    }

    headers = {
        "Content-Type": "application/json",
        "X-STRINGEE-AUTH": rest_token.strip()
    }

    try:
        response = requests.post("https://api.stringee.com/v1/call2/callout", json=payload, headers=headers)
        print(f"[Stringee] G·ª≠i cu·ªôc g·ªçi t·ªõi {to_phone}, m√£ OTP: {otp}")
        print(f"[Stringee] Ph·∫£n h·ªìi: {response.status_code} - {response.text}")
    except Exception as e:
        print(f"[Stringee] L·ªói g·ª≠i cu·ªôc g·ªçi: {str(e)}")